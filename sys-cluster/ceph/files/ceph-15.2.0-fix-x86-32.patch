diff -u src/mds/PurgeQueue.cc src/mds/PurgeQueue.cc
--- src/CMakeLists.txt
+++ src/CMakeLists.txt
@@ -126,23 +126,23 @@
 endif()
 
 include(SIMDExt)
-if(HAVE_INTEL)
-  set(CMAKE_ASM_COMPILER  ${PROJECT_SOURCE_DIR}/src/yasm-wrapper)
-  if(APPLE)
-    set(object_format "macho64")
-  else()
-    set(object_format "elf64")
-  endif()
-  set(CMAKE_ASM_FLAGS "-f ${object_format}")
-  if(NOT WIN32)
-    # The native tools might be located even when cross compiling, which
-    # might not work in this case (especially when targeting Windows).
-    include(CheckYasm)
-    check_yasm_support(${object_format}
-      HAVE_GOOD_YASM_ELF64
-      HAVE_BETTER_YASM_ELF64)
-  endif()
-endif()
 
 
 # require c++17
@@ -812,9 +812,9 @@
   add_dependencies(vstart tracepoint_libraries)
 endif(WITH_LTTNG)
 
-if(WITH_MGR AND WITH_MGR_DASHBOARD_FRONTEND AND CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64|amd64")
-  add_dependencies(vstart mgr-dashboard-frontend-build)
-endif()
 
 if(WITH_MGR)
   add_dependencies(vstart ceph-volume-venv-setup)
diff -urN src/mds/PurgeQueue.cc src/mds/PurgeQueue.cc
--- src/mds/PurgeQueue.cc
+++ src/mds/PurgeQueue.cc
@@ -501,7 +501,7 @@
 
   in_flight[expire_to] = item;
   logger->set(l_pq_executing, in_flight.size());
-  files_high_water = std::max(files_high_water, in_flight.size());
+  files_high_water = std::max(files_high_water, static_cast<uint64_t>(in_flight.size()));
   logger->set(l_pq_executing_high_water, files_high_water);
   auto ops = _calculate_ops(item);
   ops_in_flight += ops;
@@ -579,7 +579,7 @@
     logger->set(l_pq_executing_ops_high_water, ops_high_water);
     in_flight.erase(expire_to);
     logger->set(l_pq_executing, in_flight.size());
-    files_high_water = std::max(files_high_water, in_flight.size());
+    files_high_water = std::max(files_high_water, static_cast<uint64_t>(in_flight.size()));
     logger->set(l_pq_executing_high_water, files_high_water);
     return;
   }
@@ -651,7 +651,7 @@
 
   in_flight.erase(iter);
   logger->set(l_pq_executing, in_flight.size());
-  files_high_water = std::max(files_high_water, in_flight.size());
+  files_high_water = std::max(files_high_water, static_cast<uint64_t>(in_flight.size()));
   logger->set(l_pq_executing_high_water, files_high_water);
   dout(10) << "in_flight.size() now " << in_flight.size() << dendl;
 
